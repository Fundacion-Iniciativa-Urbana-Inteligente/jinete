import React, { useState, useEffect } from "react";
import { MapContainer, Marker, Popup, TileLayer } from "react-leaflet";
import axios from "axios";
import OtpInput from "react-otp-input";
import "./Mapa.css";

const defaultPosition = [-27.3653656, -55.8887637];

export default function Mapa() {
  const [bicycles, setBicycles] = useState([]);
  const [unlockToken, setUnlockToken] = useState("");
  const [message, setMessage] = useState("");

  useEffect(() => {
    const fetchBicycles = async () => {
      try {
        const response = await axios.get(
          `${import.meta.env.VITE_BACKEND_URL}/gbfs/free_bike_status.json`
        );

        if (response.data?.data?.bikes) {
          console.log("üìä Datos recibidos para el mapa:", response.data.data.bikes);
          setBicycles(response.data.data.bikes);
        } else {
          console.error("Estructura de respuesta inesperada:", response.data);
          setBicycles([]);
        }
      } catch (error) {
        console.error("Error al obtener bicicletas:", error);
        setBicycles([]);
      }
    };

    fetchBicycles();
  }, []);

  const handleUnlock = async () => {
    if (!unlockToken) {
      setMessage("Por favor ingresa el token de desbloqueo.");
      return;
    }

    try {
      const response = await axios.post(`${import.meta.env.VITE_BACKEND_URL}/api/unlock`, {
        token: unlockToken,
      });

      setMessage(response.data?.message || "Error desconocido.");
    } catch (error) {
      console.error("Error al intentar desbloquear:", error);
      setMessage("Error al intentar desbloquear.");
    }
  };

  return (
    <div id="mapa" style={{ position: "relative" }}>
      <MapContainer center={defaultPosition} zoom={15} style={{ height: "100vh", zIndex: 0 }}>
        <TileLayer url="https://tiles.stadiamaps.com/tiles/stamen_toner/{z}/{x}/{y}{r}.png" />
        {bicycles.map((bike) => (
          <Marker key={bike.bike_id} position={[bike.lat, bike.lon]}>
            <Popup>
              <strong>{bike.bike_id}</strong>
              <br />
              TnCO2eq evitado: {(parseFloat(bike.current_fuel_percent) * 0.21).toFixed(2)}
              <br />
              Bater√≠a: {bike.current_fuel_percent} %
            </Popup>
          </Marker>
        ))}
      </MapContainer>
     
      <footer
        style={{
          position: "absolute",
          bottom: "40px",
          left: "50%",
          transform: "translateX(-50%)",
          padding: "15px",
          backgroundColor: "rgba(0, 0, 0, 0)",
          textAlign: "center",
          borderRadius: "0px",
          display: "flex",
          alignItems: "center",
          width: "80%",
          maxWidth: "400px",
          zIndex: 1000,
        }}
      >
        <OtpInput
          value={unlockToken}
          onChange={setUnlockToken}
          numInputs={4}
          renderSeparator={<span> - </span>}
          renderInput={(props) => <input {...props} />}
          shouldAutoFocus
          containerStyle={{ display: "flex", justifyContent: "center", gap: "5px" }}
          inputStyle={{
            width: "50px",
            height: "50px",
            fontSize: "24px",
            textAlign: "center",
            borderRadius: "0px",
            border: "0px solid black",
            backgroundColor: "yellow",
            color: "black",
            fontWeight: "bold",
          }}
        />
        <button
          onClick={handleUnlock}
          style={{
            padding: "15px 15px",
            backgroundColor: "yellow",
            color: "black",
            border: "0px solid black",
            borderRadius: "0px",
            cursor: "pointer",
            fontSize: "20px",
            fontWeight: "bold",
            marginLeft: "10px",
          }}
        >
          ABRIR
        </button>
      </footer>
    </div>
  );
}